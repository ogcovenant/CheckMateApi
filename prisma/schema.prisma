// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("ONLINE_DATABASE_URL")
}

model User {
  id          String               @id @default(uuid())
  email       String               @unique
  password    String
  createdAt   DateTime             @default(now())
  tasks       Task[]
  List        List[]               @relation("list")
  sharedList  List[]               @relation("collab")
  resetPassId ResetPasswordTable[]
}

model Task {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String     @db.VarChar(255)
  description String     @db.Text
  dueDate     DateTime
  priority    String     @db.VarChar(255)
  tags        Tag[]
  note        String     @db.Text
  status      String
  category    Category[]
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?
  List        List?      @relation(fields: [listId], references: [id])
  listId      String?
}

model Tag {
  id    String @id @default(uuid())
  title String @db.VarChar(255)

  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?
}

model Category {
  id    String @id @default(uuid())
  title String @db.VarChar(255)

  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?
}

model List {
  id   String @id @default(uuid())
  name String @db.VarChar(255)

  collaborators User[] @relation("collab")
  tasks         Task[]
  user          User   @relation("list", fields: [userId], references: [id])
  userId        String
}

model ResetPasswordTable {
  id        String   @id @default(uuid())
  expiresIn DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}
